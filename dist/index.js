(()=>{"use strict";const e=[{x:0,y:-1,name:"⇐"},{x:-1,y:0,name:"⇑"},{x:0,y:1,name:"⇒"},{x:1,y:0,name:"⇓"}],t={currentState:null,moves:0,settled:0,dropped:0,depth:0,haveSolution:!1},n=(e,t,n=!0)=>{console.log(`Index of the state ${t}`);let o="";for(let t of e){const e=t.map((e=>e||" "));o+="-------------\n",o+=`| ${e[0]} | ${e[1]} | ${e[2]} |\n`}return o+="-------------\n",n&&console.log(o),o},o=e=>{let t={x:0,y:0,name:"empty"};e:for(let n=0;n<e[0].length;++n)for(let o=0;o<e.length;++o)if(null===e[n][o]){t.x=n,t.y=o;break e}return t},l=e=>e.x>=3||e.x<0||e.y>=3||e.y<0;class s{constructor(e,t,o,l,s){this.getState=()=>this.state,this.getMoves=()=>this.operator,this.getDepth=()=>this.depth||1,this.pathFromStart=()=>{let e=[],t=[],o=this;console.log(o.getDepth());do{e.push(o?.getState()),t.push(o?.getMoves()),o=o?.parent}while(o?.getDepth());e.reverse(),t.reverse();let l=1;for(const t of e)n(t,l),l++;return console.log(`Кількість переміщень: ${t.length}`),console.log(`Переміщення по порядку: ${t.join(", ")}\n`),t},this.state=e,this.parent=t,this.operator=o,this.depth=l,this.cost=s}}let r=t;(()=>{let a=[];const d=document.querySelector(".next"),c=document.querySelector(".result"),i=document.querySelector(".find"),p=document.getElementById("result-content");let h=0;const u=document.getElementById("results");d.disabled=!0,c.disabled=!0,d?.addEventListener("click",(()=>{h>=a.length-1&&(d.disabled=!0);const e=document.createElement("table");e.className+="table table-primary table-hover table-bordered table-sm align-middle caption-top",e.style.width="200px",e.style.height="200px",e.style.textAlign="center",e.insertAdjacentHTML("afterbegin",`\n            <caption class="fw-bold text-primary">\n               Index of the state is ${a[h].index}\n            </caption>\n         `);const t=document.createElement("tbody");for(let e of a[h].state){const n=t.insertRow();for(let t of e){const e=n.insertCell();e.classList.add("align-middle"),e.innerHTML=t?String(t):" "}}e.appendChild(t),u?.appendChild(e),u.scrollTop=u.scrollHeight,n(a[h].state,a[h].index),h++})),c?.addEventListener("click",(()=>{p.innerHTML="",r.haveSolution?(console.log("Порядок переміщень для розв'язку гри в 8:"),r?.currentState?.pathFromStart(),console.log(`Кількість відвіданих станів: ${r.moves}`),console.log(`Кількість станів занесених у БД: ${r.settled}`),console.log(`Кількість відкинутих станів: ${r.dropped}`),console.log(`Глибина дерева пошуку на якій знайдено рішення: ${r.depth}`),p.insertAdjacentHTML("beforeend",`\n            <code>\n            <pre>Кількість відвіданих станів: ${r.moves}<br>Кількість станів занесених у БД: ${r.settled}<br>Кількість відкинутих станів: ${r.dropped}<br>Глибина дерева пошуку на якій знайдено рішення: ${r.depth}</pre>\n            </code>\n         `)):(console.log(`Кількість відвіданих станів: ${r.moves}`),console.log(`Кількість станів занесених у БД: ${r.settled}`),console.log(`Кількість відкинутих станів: ${r.dropped}`),console.log("Гра у 8 немає розв'язків"),p.insertAdjacentHTML("beforeend",`\n            <code>\n            <pre>Кількість відвіданих станів : ${r.moves}<br>Кількість станів занесених у БД : ${r.settled}<br>Кількість відкинутих станів : ${r.dropped}<br>Гра у 8 немає розв'язків</pre>\n            </code>\n         `))})),i?.addEventListener("click",(()=>{const n=e=>{const t=[];for(let n of e.rows){const e=[];for(let t of n.cells){const n=parseInt(t.innerHTML);Number.isNaN(n)?e.push(null):e.push(n)}t.push(e)}return t},i=document.querySelector(".initial-state"),p=document.querySelector(".final-state"),g=n(i),m=n(p);h=0,r=t,u.innerHTML=null;const y=new Map;y.set(g.toString(),!0);const f=[new s(g,null,null,0,0)];a=function(t,n,a,d){for(;d.length;){let i=d.pop();if(r={...r,currentState:i,settled:a.size,depth:i.getDepth(),haveSolution:!1},c=t,i.getState()?.toString()===c?.toString())return r.haveSolution=!0,n;const p=o(i.getState());e.forEach((e=>{const t=i?.getState()?.map((e=>[...e])),o={x:p.x+e.x,y:p.y+e.y,name:e.name};l(o)||([t[p.x][p.y],t[o.x][o.y]]=[t[o.x][o.y],t[p.x][p.y]],r.moves++,a.get(t.toString())?r.dropped++:(d.push(new s(t,i,e.name,i.getDepth()+1,0)),a.set(t.toString(),!0),n.push({state:t,index:r.moves+1})))}))}var c;return n}(m,[{state:g,index:1}],y,f),d.disabled=!1,c.disabled=!1}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,